name: CI/CD - LECOMS API (Docker → VPS)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

concurrency:
  group: lecoms-api-deploy
  cancel-in-progress: true

jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: voleducanh93/lecoms-api
      IMAGE_TAG: latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Tạo SHORT_SHA bằng shell (thay cho substr() trong expressions)
      - name: Set SHORT_SHA env
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub Login (CI)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./LECOMS
          file: ./LECOMS/Dockerfile
          push: true
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:sha-${{ env.SHORT_SHA }}

      - name: Deploy on VPS (password auth)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            set -e

            echo "==> Precheck .env"
            if [ ! -f /var/lecoms/.env ]; then
              echo "ERROR: /var/lecoms/.env not found"; exit 1;
            fi

            echo "==> Ensure curl exists (for healthcheck)"
            if ! command -v curl >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y curl
            fi

            echo "==> Docker Hub login"
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "==> Pull latest image"
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            echo "==> Stop/remove old container by name"
            if [ "$(docker ps -aq -f name=lecoms-api)" ]; then
              docker rm -f lecoms-api || true
            fi

            echo "==> Free up port 8080 from ANY docker container"
            if docker ps --format '{{.ID}} {{.Ports}}' | grep -q ':8080->'; then
              docker ps --format '{{.ID}} {{.Names}} {{.Ports}}' | grep ':8080->' || true
              docker ps --format '{{.ID}} {{.Ports}}' | grep ':8080->' | awk '{print $1}' | xargs -r docker rm -f
            fi

            echo "==> Check if a NON-docker process uses 8080"
            if sudo ss -ltnp | grep -q ':8080 '; then
              echo "ERROR: A non-docker process is listening on 8080:"
              sudo ss -ltnp | grep ':8080 ' || true
              exit 1
            fi

            echo "==> Run new container on 8080"
            docker run -d \
              --name lecoms-api \
              --restart unless-stopped \
              --env-file /var/lecoms/.env \
              -e Jwt__Key=${{ secret.Jwt }} \
              -p 8080:8080 \
              --health-cmd="curl -fsS http://localhost:8080/health || exit 1" \
              --health-interval=30s --health-retries=3 --health-timeout=5s \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            echo "==> Cleanup"
            docker container prune -f || true
            docker image prune -af || true

            echo "==> Done"
            docker ps --filter "name=lecoms-api"
